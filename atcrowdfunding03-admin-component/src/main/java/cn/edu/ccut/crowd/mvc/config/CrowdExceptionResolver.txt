package cn.edu.ccut.crowd.mvc.config;

import cn.edu.ccut.crowd.util.CrowdUtil;
import cn.edu.ccut.crowd.util.ResultEntity;
import com.google.gson.Gson;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * Created with IntelliJ IDEA.
 *
 * @Author: Fengshi
 * @Date: 2023/03/27/22:10
 * @Description:
 */
// @ControllerAdvice 表示当前类是一个基于注解的异常处理器类
@ControllerAdvice
public class CrowdExceptionResolver {

    @ExceptionHandler(value = ArithmeticException.class)
    public ModelAndView resolveMathException(
            ArithmeticException exception,
            HttpServletRequest request,
            HttpServletResponse response
                                             ) throws IOException {

        // 1、判断请求的类型
        boolean judgeRequest = CrowdUtil.judgeRequestType(request);

        // 2、如果Ajax请求
        if (judgeRequest) {

            // 3、创建ResultEntity对象
            ResultEntity<Object> resultEntity = ResultEntity.failed(exception.getMessage());

            // 4、创建一个Gson对象
            Gson gson = new Gson();

            // 5、将ResultEntity对象转换为json字符串
            String json = gson.toJson(resultEntity);

            // 6、将json字符串作为响应体返回给浏览器
            response.getWriter().write(json);

            // 7、由于上面已经通过原生的response对象返回了响应，所以不提供ModelAndView对象
            return null;
        }

        // 8、如果不是Ajax请求 则创建ModelAndView对象
        ModelAndView modelAndView = new ModelAndView();

        // 9、将Exception对象存入模型
        modelAndView.addObject("exception", exception);

        // 10、设置对应的视图名称
        modelAndView.setViewName("system-error");

        // 11、返回ModelAndView对象
        return modelAndView;
    }

    // @ExceptionHandler 将一个具体的异常类型和一个方法关联起来
    @ExceptionHandler(value = NullPointerException.class)
    public ModelAndView resolveNullPointerException(
            NullPointerException exception,  //实际捕获到的异常类型
            HttpServletRequest request,      //当前请求对象
            HttpServletResponse response     //当前响应对象
    ) throws IOException {

        // 1、判断请求的类型
        boolean judgeRequest = CrowdUtil.judgeRequestType(request);

        // 2、如果Ajax请求
        if (judgeRequest) {

            // 3、创建ResultEntity对象
            ResultEntity<Object> resultEntity = ResultEntity.failed(exception.getMessage());

            // 4、创建一个Gson对象
            Gson gson = new Gson();

            // 5、将ResultEntity对象转换为json字符串
            String json = gson.toJson(resultEntity);

            // 6、将json字符串作为响应体返回给浏览器
            response.getWriter().write(json);

            // 7、由于上面已经通过原生的response对象返回了响应，所以不提供ModelAndView对象
            return null;
        }

        // 8、如果不是Ajax请求 则创建ModelAndView对象
        ModelAndView modelAndView = new ModelAndView();

        // 9、将Exception对象存入模型
        modelAndView.addObject("exception", exception);

        // 10、设置对应的视图名称
        modelAndView.setViewName("system-error");

        // 11、返回ModelAndView对象
        return modelAndView;
    }

}
